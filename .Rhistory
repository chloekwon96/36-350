degree = as.numeric(strsplit(as.character(s),"d|m|s")[[1]])
res = abs(degree[1])+degree[2]/60+degree[3]/3600
if(substr(x,1,1) == "+") return(res)
else return(-res)
}
res_ra = rep(0, nrow(exoplanet.df))
res_dec = rep(0, nrow(exoplanet.df))
for(ii in (1:nrow(exoplanet.df))){
res_ra[ii] = right.ascension(exoplanet.df$ra_str[ii])
res_dec[ii] = declination(exoplanet.df$dec_str[ii])
}
max(res_ra - exoplanet.df$ra) <= 0.00004
right.ascension  = function(s){
degree = as.numeric(strsplit(as.character(s), "h|m|s")[[1]])
return(degree[1]*15 + degree[2]*15/60 + degree[3]*15/3600)
}
declination = function(s){
degree = as.numeric(strsplit(as.character(s),"d|m|s")[[1]])
res = abs(degree[1])+degree[2]/60+degree[3]/3600
if(substr(s,1,1) == "+") return(res)
else return(-res)
}
res_ra = rep(0, nrow(exoplanet.df))
res_dec = rep(0, nrow(exoplanet.df))
for(ii in (1:nrow(exoplanet.df))){
res_ra[ii] = right.ascension(exoplanet.df$ra_str[ii])
res_dec[ii] = declination(exoplanet.df$dec_str[ii])
}
max(res_ra - exoplanet.df$ra) <= 0.00004
right.ascension  = function(s){
degree = as.numeric(strsplit(as.character(s), "h|m|s")[[1]])
return(degree[1]*15 + degree[2]*15/60 + degree[3]*15/3600)
}
declination = function(s){
degree = as.numeric(strsplit(as.character(s),"d|m|s")[[1]])
res = abs(degree[1])+degree[2]/60+degree[3]/3600
if(substr(s,1,1) == "+") return(res)
else return(-res)
}
res_ra = rep(0, nrow(exoplanet.df))
res_dec = rep(0, nrow(exoplanet.df))
for(ii in (1:nrow(exoplanet.df))){
res_ra[ii] = right.ascension(exoplanet.df$ra_str[ii])
res_dec[ii] = declination(exoplanet.df$dec_str[ii])
}
max(res_ra - exoplanet.df$ra) <= 0.00004
max(res_dec - exoplanet.df$dec) <= 0.00004
right.ascension  = function(s){
degree = as.numeric(strsplit(as.character(s), "h|m|s")[[1]])
return(degree[1]*15 + degree[2]*15/60 + degree[3]*15/3600)}
declination = function(s){
degree = as.numeric(strsplit(as.character(s),"d|m|s")[[1]])
res = abs(degree[1])+degree[2]/60+degree[3]/3600
if(substr(s,1,1) == "+") return(res)
else return(-res)}
res_ra = rep(0, nrow(exoplanet.df))
res_dec = rep(0, nrow(exoplanet.df))
for(ii in (1:nrow(exoplanet.df))){
res_ra[ii] = right.ascension(exoplanet.df$ra_str[ii])
res_dec[ii] = declination(exoplanet.df$dec_str[ii])}
max(res_ra - exoplanet.df$ra) <= 0.00004
max(res_dec - exoplanet.df$dec) <= 0.00004
library(MASS)
hostname.tab = table(exoplanet.df$pl_hostname)
add.exoplanet = hostname.tab-1
ftable(add.exoplanet)
# Table and Histogram
hist(add.exoplanet, main="Histogram of Additional Exoplanets", xlab="Number of Additional Exoplanets (per star)", breaks=0:6, col="mistyrose", prob=TRUE)
# Find optimal lambda value to fit a Poisson distribution
my.fit.fun.sd = function(my.lambda, my.data) {-sum(log(dpois(my.data, lambda = my.lambda)))}
optim.out = optimize(my.fit.fun.sd, interval=c(0.1,3),my.data=add.exoplanet)
optim.out$minimum
#y_val = dpois(c(0:5), optim.out$minimum)
#points(c(0:5), y_val)
# Overplot the points representing best-fit Poisson pmf
#lines(0:6,dpois(0:6,lambda = 0.77690141),col="salmon", lwd=3)
#points(0:6,dpois(0:6,lambda = 0.77690141), col="royalblue1", pch=16, cex=1.3)
library(MASS)
hostname.tab = table(exoplanet.df$pl_hostname)
add.exoplanet = hostname.tab-1
ftable(add.exoplanet)
# Table and Histogram
hist(add.exoplanet, main="Histogram of Additional Exoplanets", xlab="Number of Additional Exoplanets (per star)", breaks=0:6, col="mistyrose", prob=TRUE)
# Find optimal lambda value to fit a Poisson distribution
my.fit.fun.sd = function(my.lambda, my.data) {-sum(log(dpois(my.data, lambda = my.lambda)))}
optim.out = optimize(my.fit.fun.sd, interval=c(0.1,3),my.data=add.exoplanet)
optim.out$minimum
y_val = dpois(c(0:5), optim.out$minimum)
points(c(0:5), y_val)
# Overplot the points representing best-fit Poisson pmf
#lines(0:6,dpois(0:6,lambda = 0.77690141),col="salmon", lwd=3)
#points(0:6,dpois(0:6,lambda = 0.77690141), col="royalblue1", pch=16, cex=1.3)
library(MASS)
hostname.tab = table(exoplanet.df$pl_hostname)
add.exoplanet = hostname.tab-1
ftable(add.exoplanet)
# Table and Histogram
hist(add.exoplanet, main="Histogram of Additional Exoplanets", xlab="Number of Additional Exoplanets (per star)", breaks=0:6, col="mistyrose", prob=TRUE)
# Find optimal lambda value to fit a Poisson distribution
my.fit.fun.sd = function(my.lambda, my.data) {-sum(log(dpois(my.data, lambda = my.lambda)))}
optim.out = optimize(my.fit.fun.sd, interval=c(0.1,3),my.data=add.exoplanet)
optim.out$minimum
y_val = dpois(c(0:5), optim.out$minimum)
points(c(0:5), y_val, col="royalblue1", pch=16, cex=1.3)
# Overplot the points representing best-fit Poisson pmf
#lines(0:6,dpois(0:6,lambda = 0.77690141),col="salmon", lwd=3)
#points(0:6,dpois(0:6,lambda = 0.77690141), col="royalblue1", pch=16, cex=1.3)
library(MASS)
hostname.tab = table(exoplanet.df$pl_hostname)
add.exoplanet = hostname.tab-1
ftable(add.exoplanet)
# Table and Histogram
hist(add.exoplanet, main="Histogram of Additional Exoplanets", xlab="Number of Additional Exoplanets (per star)", breaks=0:6, col="mistyrose", prob=TRUE)
# Find optimal lambda value to fit a Poisson distribution
my.fit.fun.sd = function(my.lambda, my.data) {-sum(log(dpois(my.data, lambda = my.lambda)))}
optim.out = optimize(my.fit.fun.sd, interval=c(0.1,3),my.data=add.exoplanet)
optim.out$minimum
y_val = dpois(c(0:5), optim.out$minimum)
points(c(0:5), y_val, col="salmon", pch=16, cex=1.3)
# Overplot the points representing best-fit Poisson pmf
#lines(0:6,dpois(0:6,lambda = 0.77690141),col="salmon", lwd=3)
#points(0:6,dpois(0:6,lambda = 0.77690141), col="royalblue1", pch=16, cex=1.3)
library(MASS)
hostname.tab = table(exoplanet.df$pl_hostname)
add.exoplanet = hostname.tab-1
ftable(add.exoplanet)
# Table and Histogram
hist(add.exoplanet, main="Histogram of Additional Exoplanets", xlab="Number of Additional Exoplanets (per star)", breaks=0:6, col="mistyrose", prob=TRUE)
# Find optimal lambda value to fit a Poisson distribution
my.fit.fun.sd = function(my.lambda, my.data) {-sum(log(dpois(my.data, lambda = my.lambda)))}
optim.out = optimize(my.fit.fun.sd, interval=c(0.1,3),my.data=add.exoplanet)
optim.out$minimum
y_val = dpois(c(0:6), optim.out$minimum)
points(c(0:6), y_val, col="salmon", pch=16, cex=1.3)
set.seed(101)
library(testthat)
exoplanet.lines = tolower(readLines("http://www.stat.cmu.edu/~pfreeman/planets.csv",73))
helper1 <- function(x){
if(length(x)==1) return(x[[1]])
return(x[[2]])
}
num.occur = function(l) {
if(is.null(l)) return(NULL)
if(!is.character(l)) return(NULL)
if(length(l)>1) return(NULL)
lines = strsplit(grep(tolower(l),exoplanet.lines,value=TRUE),":[[:space:]]*")
return(sapply(lines, helper1))
}
num.occur("period")
num.occur("mass")
num.occur("Jupiter")
#If the length of input is greater than one, does the function returns NULL? - Success!
test_that(desc="Test that if the length of the input is greather than one, the function should return NULL",expect_null(num.occur(c("hello","world"))))
#If the input is not a character, does the function returns NULL? - Success!
test_that(desc="Test that if the input is not a character, the function should return NULL",expect_null(num.occur(3)))
exoplanet.df = read.csv("http://www.stat.cmu.edu/~pfreeman/planets.csv",skip=73, header=TRUE)
dim(exoplanet.df)
names(exoplanet.df)
#nrow(exoplanet.df)
nrow(na.omit(exoplanet.df))
sum(complete.cases(exoplanet.df))
#row.has.na <- apply(exoplanet.df, 1, function(x){any(is.na(x))})
#sum(row.has.na)
#ncol(exoplanet.df)
#colSums(is.na(exoplanet.df))
sum(colSums(is.na(exoplanet.df)) == 0)
sum(colSums(is.na(exoplanet.df)) == nrow(exoplanet.df))
emptycols <- colSums(is.na(exoplanet.df)) == nrow(exoplanet.df)
exoplanet.df <- exoplanet.df[!emptycols]
ncol(exoplanet.df)
sum(complete.cases(exoplanet.df)) # 5 complete cases
exoplanet.df = exoplanet.df[,-grep("row|flag|gaia|notes|band|lim",colnames(exoplanet.df))]
ncol(exoplanet.df)
sapply(exoplanet.df, class)
unique(sapply(exoplanet.df, class))
table(unlist(sapply(exoplanet.df, class)))
alias.exoplanet.pl_hostname = as.character(exoplanet.df$pl_hostname)
filter = sapply(strsplit(as.character(exoplanet.df$pl_hostname),split= "\\ "),'[',1)
# Find indices to filter out:
# hostnames whose first "word" is all numbers
num.ind = grep("^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$",filter)
# hostnames with no spaces or dashes
sd.ind = grep("^\\s|^-",filter)
# hostnames with first-word comprised of only lower-case
lower.ind = grep("^[[:lower:]]+$",filter)
filter = filter[c(-num.ind, -sd.ind, -lower.ind)] #for sanity check
alias.exoplanet.pl_hostname = alias.exoplanet.pl_hostname[c(-num.ind, -sd.ind, -lower.ind)]
# Tabulate the first part of each name:
pl_hostname.tab = sort(table(sapply(strsplit(alias.exoplanet.pl_hostname,split= "(\\ )|[[:punct:]]"),'[',1)),decreasing = TRUE)
names(pl_hostname.tab)
head(pl_hostname.tab,1) # Answer: Kepler(2299)
# pl_discmethod
alias.exoplanet.pl_discmethod = exoplanet.df$pl_discmethod
method.tab = sort(table(alias.exoplanet.pl_discmethod), decreasing = TRUE)
method.tab
head(method.tab, 1) # The most commonly used method: Transit
# Get indices for Kepler
Kepler.idx = grep("Kepler", exoplanet.df$pl_hostname)
# Tabulate Kepler data (non-Transit vs Transit)
table((alias.exoplanet.pl_discmethod[Kepler.idx] == "Transit"))
library(MASS)
hostname.tab = table(exoplanet.df$pl_hostname)
add.exoplanet = hostname.tab-1
ftable(add.exoplanet)
# Table and Histogram
hist(add.exoplanet, main="Histogram of Additional Exoplanets", xlab="Number of Additional Exoplanets (per star)", breaks=0:6, col="mistyrose", prob=TRUE)
# Find optimal lambda value to fit a Poisson distribution
my.fit.fun.sd = function(my.lambda, my.data) {-sum(log(dpois(my.data, lambda = my.lambda)))}
optim.out = optimize(my.fit.fun.sd, interval=c(0.1,3),my.data=add.exoplanet)
optim.out$minimum
y_val = dpois(c(0:6), optim.out$minimum)
points(c(0:6), y_val, col="salmon", pch=16, cex=1.3)
right.ascension  = function(s){
degree = as.numeric(strsplit(as.character(s), "h|m|s")[[1]])
return(degree[1]*15 + degree[2]*15/60 + degree[3]*15/3600)}
declination = function(s){
degree = as.numeric(strsplit(as.character(s),"d|m|s")[[1]])
res = abs(degree[1])+degree[2]/60+degree[3]/3600
if(substr(s,1,1) == "+") return(res)
else return(-res)}
res_ra = rep(0, nrow(exoplanet.df))
res_dec = rep(0, nrow(exoplanet.df))
for(ii in (1:nrow(exoplanet.df))){
res_ra[ii] = right.ascension(exoplanet.df$ra_str[ii])
res_dec[ii] = declination(exoplanet.df$dec_str[ii])}
max(res_ra - exoplanet.df$ra) <= 0.00004
max(res_dec - exoplanet.df$dec) <= 0.00004
# Remove missing values from pl_bmassj and empty group from pl_bmassprov:
bmassj.na.idx = which(is.na(exoplanet.df$pl_bmassj)==TRUE)
bmassprov.empty.idx = which(exoplanet.df$pl_bmassprov == "")
rem = union(bmassj.na.idx,bmassprov.empty.idx)
filtered.exop.df = exoplanet.df[-rem,]
filtered.exop.df = droplevels(filtered.exop.df)
# EDA of pl_bmassj
par(mfrow = c(2,2))
hist(filtered.exop.df$pl_bmassj, main="Distribution of Exoplanet Mass", xlab="Planet Mass [M*sin(i)]", freq=FALSE, col = "powderblue")
qqnorm(filtered.exop.df$pl_bmassj); qqline(filtered.exop.df$pl_bmassj, col = 2)
# Right-skewed data -> apply log transformation:
log.bmassj.na.idx = which(is.na(log10(filtered.exop.df$pl_bmassj))==TRUE)
filtered.exop.df$pl_bmassj = log10(filtered.exop.df$pl_bmassj) # sanity check
hist(filtered.exop.df$pl_bmassj, main="Distribution of log(Exoplanet Mass)", xlab="Log of Planet Mass [log(M*sin(i))]", freq=FALSE, col = "rosybrown1")
qqnorm(filtered.exop.df$pl_bmassj); qqline(filtered.exop.df$pl_bmassj, col = 2)
# Side-by-side boxplot
par(mfrow = c(1,1))
boxplot(filtered.exop.df$pl_bmassj~filtered.exop.df$pl_bmassprov, main="Side-by-side Boxplot of Exoplanet Masses", ylab="Log10 of Jupiter Masses")
# Perform a two-sample t-test:
x = filtered.exop.df[filtered.exop.df$pl_bmassprov=="Mass", "pl_bmassj"]
y = filtered.exop.df[filtered.exop.df$pl_bmassprov=="Msini", "pl_bmassj"]
t.test(x,y)
# Univariate EDA
par(mfrow = c(2,2))
hist(exoplanet.df$pl_orbper, main="Distribution of Exoplanet Orbital Period", xlab="Exoplanet Orbital Period", prob=TRUE);
hist(exoplanet.df$pl_orbsmax, main="Distribution of Semi-major Axis Length", xlab="Semi-major Axis Length", prob=TRUE);
qqnorm(filtered.exop.df$pl_orbper); qqline(filtered.exop.df$pl_orbper, col = 2)
qqnorm(filtered.exop.df$pl_orbsmax); qqline(filtered.exop.df$pl_orbsmax, col = 2)
par(mfrow = c(2,2))
hist(log(exoplanet.df$pl_orbper), main="Distribution of log(Exoplanet Orbital Period)", xlab="log(Exoplanet Orbital Period)", prob=TRUE, cex.main=1);
hist(log(exoplanet.df$pl_orbsmax),main="Distribution of log(Semi-major Axis Length)", xlab="log(Semi-major Axis Length)", prob=TRUE, cex.main=1);
qqnorm(log(filtered.exop.df$pl_orbper)); qqline(log(filtered.exop.df$pl_orbper), col = 2)
qqnorm(log(filtered.exop.df$pl_orbsmax)); qqline(log(filtered.exop.df$pl_orbsmax), col = 2)
# Linear regression model
mod.lm = lm(log(exoplanet.df$pl_orbper)~log(exoplanet.df$pl_orbsmax))
summary(mod.lm)
summary(mod.lm)$r.squared #R^2
# Plot
par(mfrow = c(1,1))
plot(log(exoplanet.df$pl_orbper)~log(exoplanet.df$pl_orbsmax), main="Distribution of log(Orbital Period) versus log(Semi-Major Axis Length)", xlab="log(Semi-Major Axis Length)", ylab="log(Orbital Period)", cex=0.7)
abline(mod.lm, col = "red", lwd = 2)
legend("topleft", legend = "Regression Line", col="red", lwd = 2)
library(dplyr)
plot.fx = function(df){
if (unique(df$pl_discmethod) == "Transit" || unique(df$pl_discmethod) == "Radial Velocity"){
plot(df$pl_orbsmax,df$pl_bmassj, xlab="log(Semi Major Axis Length) [AU]", ylab="log(Mass) [Jupiter masses]",pch=19, cex=0.5, log="xy")}}
#ylim=c(1,15), xlim=c(1,25)
d_ply(exoplanet.df, .(pl_discmethod), plot.fx)
library(dplyr)
plot.fx = function(df){
if (unique(df$pl_discmethod) == "Transit" || unique(df$pl_discmethod) == "Radial Velocity"){
plot(df$pl_orbsmax,df$pl_bmassj, xlab="log(Semi Major Axis Length) [AU]", ylab="log(Mass) [Jupiter masses]",pch=19, cex=0.5, log="xy")}}
#ylim=c(1,15), xlim=c(1,25)
d_ply(exoplanet.df, .(pl_discmethod), plot.fx)
library(dplyr)
library(aplyr)
library(dplyr)
library(plyr)
plot.fx = function(df){
if (unique(df$pl_discmethod) == "Transit" || unique(df$pl_discmethod) == "Radial Velocity"){
plot(df$pl_orbsmax,df$pl_bmassj, xlab="log(Semi Major Axis Length) [AU]", ylab="log(Mass) [Jupiter masses]",pch=19, cex=0.5, log="xy")}}
#ylim=c(1,15), xlim=c(1,25)
d_ply(exoplanet.df, .(pl_discmethod), plot.fx)
library(plyr)
plot.fx = function(df){
if (unique(df$pl_discmethod) == "Transit" || unique(df$pl_discmethod) == "Radial Velocity"){
plot(df$pl_orbsmax,df$pl_bmassj, xlab="log(Semi Major Axis Length) [AU]", ylab="log(Mass) [Jupiter masses]",pch=19, cex=0.5, log="xy")}}
#ylim=c(1,15), xlim=c(1,25)
d_ply(exoplanet.df, .(pl_discmethod), plot.fx)
library(randomForest)
set.seed(101)
# Filter data
exo.df = subset(exoplanet.df, select=c("pl_discmethod", "pl_bmassj", "pl_orbsmax"))
transit.idx = which(exoplanet.df$pl_discmethod == "Transit")
ra.idx =  which(exoplanet.df$pl_discmethod =="Radial Velocity")
exo.df = exo.df[union(transit.idx,ra.idx),]
exo.df = exo.df[complete.cases(exo.df),]
exo.df = droplevels(exo.df[exo.df$pl_discmethod %in% c("Transit", "Radial Velocity"),])
# Train a classifier using radomForest
n = nrow(exo.df)
train_index = sample(n, n*0.7, replace=FALSE)
train_set = exo.df[train_index,]
test_set = exo.df[-train_index,]
rf.output = randomForest(x=train_set[,c("pl_bmassj","pl_orbsmax")],y=train_set[,"pl_discmethod"],xtest=test_set[,c("pl_bmassj","pl_orbsmax")],ytest=test_set[,"pl_discmethod"], keep.forest = TRUE)
rf.output$confusion
# Misclassification rate:
rf.output
predictions = predict(rf.output, test_set)
pred.table = table(test_set$pl_discmethod, predictions)
error.rate = 1-(sum(diag(as.matrix(pred.table)))/sum(pred.table))
error.rate
set.seed(101)
library(testthat)
exoplanet.lines = tolower(readLines("http://www.stat.cmu.edu/~pfreeman/planets.csv",73))
helper1 <- function(x){
if(length(x)==1) return(x[[1]])
return(x[[2]])
}
num.occur = function(l) {
if(is.null(l)) return(NULL)
if(!is.character(l)) return(NULL)
if(length(l)>1) return(NULL)
lines = strsplit(grep(tolower(l),exoplanet.lines,value=TRUE),":[[:space:]]*")
return(sapply(lines, helper1))
}
num.occur("period")
num.occur("mass")
num.occur("Jupiter")
#If the length of input is greater than one, does the function returns NULL? - Success!
test_that(desc="Test that if the length of the input is greather than one, the function should return NULL",expect_null(num.occur(c("hello","world"))))
#If the input is not a character, does the function returns NULL? - Success!
test_that(desc="Test that if the input is not a character, the function should return NULL",expect_null(num.occur(3)))
exoplanet.df = read.csv("http://www.stat.cmu.edu/~pfreeman/planets.csv",skip=73, header=TRUE)
dim(exoplanet.df)
names(exoplanet.df)
#nrow(exoplanet.df)
nrow(na.omit(exoplanet.df))
sum(complete.cases(exoplanet.df))
#row.has.na <- apply(exoplanet.df, 1, function(x){any(is.na(x))})
#sum(row.has.na)
#ncol(exoplanet.df)
#colSums(is.na(exoplanet.df))
sum(colSums(is.na(exoplanet.df)) == 0)
sum(colSums(is.na(exoplanet.df)) == nrow(exoplanet.df))
emptycols <- colSums(is.na(exoplanet.df)) == nrow(exoplanet.df)
exoplanet.df <- exoplanet.df[!emptycols]
ncol(exoplanet.df)
sum(complete.cases(exoplanet.df)) # 5 complete cases
exoplanet.df = exoplanet.df[,-grep("row|flag|gaia|notes|band|lim",colnames(exoplanet.df))]
ncol(exoplanet.df)
sapply(exoplanet.df, class)
unique(sapply(exoplanet.df, class))
table(unlist(sapply(exoplanet.df, class)))
alias.exoplanet.pl_hostname = as.character(exoplanet.df$pl_hostname)
filter = sapply(strsplit(as.character(exoplanet.df$pl_hostname),split= "\\ "),'[',1)
# Find indices to filter out:
# hostnames whose first "word" is all numbers
num.ind = grep("^(([0-9]*)|(([0-9]*)\\.([0-9]*)))$",filter)
# hostnames with no spaces or dashes
sd.ind = grep("^\\s|^-",filter)
# hostnames with first-word comprised of only lower-case
lower.ind = grep("^[[:lower:]]+$",filter)
filter = filter[c(-num.ind, -sd.ind, -lower.ind)] #for sanity check
alias.exoplanet.pl_hostname = alias.exoplanet.pl_hostname[c(-num.ind, -sd.ind, -lower.ind)]
# Tabulate the first part of each name:
pl_hostname.tab = sort(table(sapply(strsplit(alias.exoplanet.pl_hostname,split= "(\\ )|[[:punct:]]"),'[',1)),decreasing = TRUE)
names(pl_hostname.tab)
head(pl_hostname.tab,1) # Answer: Kepler(2299)
# pl_discmethod
alias.exoplanet.pl_discmethod = exoplanet.df$pl_discmethod
method.tab = sort(table(alias.exoplanet.pl_discmethod), decreasing = TRUE)
method.tab
head(method.tab, 1) # The most commonly used method: Transit
# Get indices for Kepler
Kepler.idx = grep("Kepler", exoplanet.df$pl_hostname)
# Tabulate Kepler data (non-Transit vs Transit)
table((alias.exoplanet.pl_discmethod[Kepler.idx] == "Transit"))
library(MASS)
hostname.tab = table(exoplanet.df$pl_hostname)
add.exoplanet = hostname.tab-1
ftable(add.exoplanet)
# Table and Histogram
hist(add.exoplanet, main="Histogram of Additional Exoplanets", xlab="Number of Additional Exoplanets (per star)", breaks=0:6, col="mistyrose", prob=TRUE)
# Find optimal lambda value to fit a Poisson distribution
my.fit.fun.sd = function(my.lambda, my.data) {-sum(log(dpois(my.data, lambda = my.lambda)))}
optim.out = optimize(my.fit.fun.sd, interval=c(0.1,3),my.data=add.exoplanet)
optim.out$minimum
y_val = dpois(c(0:6), optim.out$minimum)
points(c(0:6), y_val, col="salmon", pch=16, cex=1.3)
right.ascension  = function(s){
degree = as.numeric(strsplit(as.character(s), "h|m|s")[[1]])
return(degree[1]*15 + degree[2]*15/60 + degree[3]*15/3600)}
declination = function(s){
degree = as.numeric(strsplit(as.character(s),"d|m|s")[[1]])
res = abs(degree[1])+degree[2]/60+degree[3]/3600
if(substr(s,1,1) == "+") return(res)
else return(-res)}
res_ra = rep(0, nrow(exoplanet.df))
res_dec = rep(0, nrow(exoplanet.df))
for(ii in (1:nrow(exoplanet.df))){
res_ra[ii] = right.ascension(exoplanet.df$ra_str[ii])
res_dec[ii] = declination(exoplanet.df$dec_str[ii])}
max(res_ra - exoplanet.df$ra) <= 0.00004
max(res_dec - exoplanet.df$dec) <= 0.00004
# Remove missing values from pl_bmassj and empty group from pl_bmassprov:
bmassj.na.idx = which(is.na(exoplanet.df$pl_bmassj)==TRUE)
bmassprov.empty.idx = which(exoplanet.df$pl_bmassprov == "")
rem = union(bmassj.na.idx,bmassprov.empty.idx)
filtered.exop.df = exoplanet.df[-rem,]
filtered.exop.df = droplevels(filtered.exop.df)
# EDA of pl_bmassj
par(mfrow = c(2,2))
hist(filtered.exop.df$pl_bmassj, main="Distribution of Exoplanet Mass", xlab="Planet Mass [M*sin(i)]", freq=FALSE, col = "powderblue")
qqnorm(filtered.exop.df$pl_bmassj); qqline(filtered.exop.df$pl_bmassj, col = 2)
# Right-skewed data -> apply log transformation:
log.bmassj.na.idx = which(is.na(log10(filtered.exop.df$pl_bmassj))==TRUE)
filtered.exop.df$pl_bmassj = log10(filtered.exop.df$pl_bmassj) # sanity check
hist(filtered.exop.df$pl_bmassj, main="Distribution of log(Exoplanet Mass)", xlab="Log of Planet Mass [log(M*sin(i))]", freq=FALSE, col = "rosybrown1")
qqnorm(filtered.exop.df$pl_bmassj); qqline(filtered.exop.df$pl_bmassj, col = 2)
# Side-by-side boxplot
par(mfrow = c(1,1))
boxplot(filtered.exop.df$pl_bmassj~filtered.exop.df$pl_bmassprov, main="Side-by-side Boxplot of Exoplanet Masses", ylab="Log10 of Jupiter Masses")
# Perform a two-sample t-test:
x = filtered.exop.df[filtered.exop.df$pl_bmassprov=="Mass", "pl_bmassj"]
y = filtered.exop.df[filtered.exop.df$pl_bmassprov=="Msini", "pl_bmassj"]
t.test(x,y)
# Univariate EDA
par(mfrow = c(2,2))
hist(exoplanet.df$pl_orbper, main="Distribution of Exoplanet Orbital Period", xlab="Exoplanet Orbital Period", prob=TRUE);
hist(exoplanet.df$pl_orbsmax, main="Distribution of Semi-major Axis Length", xlab="Semi-major Axis Length", prob=TRUE);
qqnorm(filtered.exop.df$pl_orbper); qqline(filtered.exop.df$pl_orbper, col = 2)
qqnorm(filtered.exop.df$pl_orbsmax); qqline(filtered.exop.df$pl_orbsmax, col = 2)
par(mfrow = c(2,2))
hist(log(exoplanet.df$pl_orbper), main="Distribution of log(Exoplanet Orbital Period)", xlab="log(Exoplanet Orbital Period)", prob=TRUE, cex.main=1);
hist(log(exoplanet.df$pl_orbsmax),main="Distribution of log(Semi-major Axis Length)", xlab="log(Semi-major Axis Length)", prob=TRUE, cex.main=1);
qqnorm(log(filtered.exop.df$pl_orbper)); qqline(log(filtered.exop.df$pl_orbper), col = 2)
qqnorm(log(filtered.exop.df$pl_orbsmax)); qqline(log(filtered.exop.df$pl_orbsmax), col = 2)
# Linear regression model
mod.lm = lm(log(exoplanet.df$pl_orbper)~log(exoplanet.df$pl_orbsmax))
summary(mod.lm)
summary(mod.lm)$r.squared #R^2
# Plot
par(mfrow = c(1,1))
plot(log(exoplanet.df$pl_orbper)~log(exoplanet.df$pl_orbsmax), main="Distribution of log(Orbital Period) versus log(Semi-Major Axis Length)", xlab="log(Semi-Major Axis Length)", ylab="log(Orbital Period)", cex=0.7)
abline(mod.lm, col = "red", lwd = 2)
legend("topleft", legend = "Regression Line", col="red", lwd = 2)
library(plyr)
plot.fx = function(df){
if (unique(df$pl_discmethod) == "Transit" || unique(df$pl_discmethod) == "Radial Velocity"){
plot(df$pl_orbsmax,df$pl_bmassj, xlab="log(Semi Major Axis Length) [AU]", ylab="log(Mass) [Jupiter masses]",pch=19, cex=0.5, log="xy")}}
#ylim=c(1,15), xlim=c(1,25)
d_ply(exoplanet.df, .(pl_discmethod), plot.fx)
library(randomForest)
set.seed(101)
# Filter data
exo.df = subset(exoplanet.df, select=c("pl_discmethod", "pl_bmassj", "pl_orbsmax"))
transit.idx = which(exoplanet.df$pl_discmethod == "Transit")
ra.idx =  which(exoplanet.df$pl_discmethod =="Radial Velocity")
exo.df = exo.df[union(transit.idx,ra.idx),]
exo.df = exo.df[complete.cases(exo.df),]
exo.df = droplevels(exo.df[exo.df$pl_discmethod %in% c("Transit", "Radial Velocity"),])
# Train a classifier using radomForest
n = nrow(exo.df)
train_index = sample(n, n*0.7, replace=FALSE)
train_set = exo.df[train_index,]
test_set = exo.df[-train_index,]
rf.output = randomForest(x=train_set[,c("pl_bmassj","pl_orbsmax")],y=train_set[,"pl_discmethod"],xtest=test_set[,c("pl_bmassj","pl_orbsmax")],ytest=test_set[,"pl_discmethod"], keep.forest = TRUE)
rf.output$confusion
# Misclassification rate:
rf.output
predictions = predict(rf.output, test_set)
pred.table = table(test_set$pl_discmethod, predictions)
error.rate = 1-(sum(diag(as.matrix(pred.table)))/sum(pred.table))
error.rate
library(dplyr)
dlply(exo.df,.(pl_discmethod),summary)
goldilocks.df = subset(exoplanet.df,select=c("st_teff", "st_rad", "pl_orbsmax"))
goldilocks.df = goldilocks.df[which(complete.cases(goldilocks.df)==TRUE),]
goldilocks.df$st_lum = with(goldilocks.df, 4*pi*(st_rad^2)*(7.15*10^(-17))*(st_teff^4))
goldilocks.df$rad_inner = with(goldilocks.df, (st_lum/1.1)^(1/2))
goldilocks.df$rad_outer = with(goldilocks.df, (st_lum/0.53)^(1/2))
logical1 = function(df){
if ((df["rad_inner"] <= df["pl_orbsmax"]) && (df["rad_outer"] >= df["pl_orbsmax"])) return(TRUE)
else return(FALSE)
}
logic_vec1 = apply(goldilocks.df, 1, logical1)
length(which(logic_vec1))/nrow(goldilocks.df)
habitzone.df = subset(exoplanet.df,select=c("st_teff", "st_rad", "pl_orbsmax"))
habitzone.df$pl_bmasse = (exoplanet.df$pl_bmassj)*317.8
habitzone.df$pl_brade = (exoplanet.df$pl_radj)*11.2
habitzone.df = habitzone.df[which(complete.cases(habitzone.df)==TRUE),]
habitzone.df$st_lum = with(habitzone.df, 4*pi*(st_rad^2)*(7.15*10^(-17))*(st_teff^4))
habitzone.df$rad_inner = with(habitzone.df, (st_lum/1.1)^(1/2))
habitzone.df$rad_outer = with(habitzone.df, (st_lum/0.53)^(1/2))
logical1 = function(df){
if ((df["rad_inner"] <= df["pl_orbsmax"]) && (df["rad_outer"] >= df["pl_orbsmax"])) return(TRUE)
else return(FALSE)
}
logical2 = function(df){
if ((0.8<=df["pl_bmasse"]) && (df["pl_bmasse"]<=1.9) && (0.5<=df["pl_brade"]) && (df["pl_brade"]<=2)) return(TRUE)
else return(FALSE)
}
g.logic_vec = apply(habitzone.df, 1, logical1)
h.logic_vec = apply(habitzone.df, 1, logical2)
intersect(which(g.logic_vec),which(h.logic_vec))
